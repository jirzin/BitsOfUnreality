// =====================================================================
// SuperCollider Workspace
// =====================================================================

s = Server.local.boot;
(
o = Server.local.options;
o.numInputBusChannels = 8;
o.numOutputBusChannels = 8;
o.memSize=2**14;
s.reboot;
)
2**14
s.scope(16);
s.freeAll

p = ProxySpace.push()

(
~source_1.play;
~source_1={
	var i1 = In.ar(12);

	var sig = Perlin3.ar(
		SinOsc.ar(3000*i1)*4.71,
		SinOsc.ar(0.02)*(i1*0.25+0.25)*200,
		LFNoise2.ar(0.1)*100.31
	)*0.82;	

	sig = Convolution.ar(sig,In.ar(13),2**6,1);

	sig = BHiPass.ar(sig,50,0.083);

	sig = Normalizer.ar(sig)*0.1+sig;
	
	//
	//
	
	Out.ar(0,sig!2)
}
)

2**14

~source_1=nil;
(
a = {
	SplayAz.ar(
		4, 
		In.ar(14), 
		spread: 4,
		level: 1,
		width: MouseY.kr(1,4),
		center: 0,
		orientation: MouseX.kr(0,4),
		levelComp: true)
}.play(s);
)
a.free;

(
~fm7.play;
~fm7={
	var sig = FM7.ar(
		[
			[140, 0, 1],
			[3300, 0.1, 1],
			[230, 0.3, 0.2],
			[RosslerL.ar(freq: 22050, a: 0.2, b: 0.27, c: 5.7, h: 0.05, xi: 0.1, yi: 0, zi: 0, mul: 100, add: 2300),0,0.2],
			[50,0.8,0.7],
			[0,0,0]],
		[
			[0.1,0.1,MouseX.kr(0,0.92),0,0,0],
			[MouseX.kr(0,0.72),0.3,0.2,0,0.4,0],
			[0.1,0,0.2,0,0,0],
			[0,0,0,0.2,0.25,0],
			[0,MouseY.kr(0,0.7),0,0,0,0],
			[0,0,0,0,0,0],
		]);
	sig = Mix.ar(sig);
	sig = 
	Out.ar(0,sig*0.12!2)	
}
)
~fm7=nil;
(
~orego.play;
~orego={
	var sig = Oregonator.ar(reset: 0.1, rate: 0.01, epsilon: 0.41, mu: 0.81, q: 1, initx: 0.5, inity: 0.25, initz: 0.5, mul: 0.51, add: 0);
	Out.ar(0,sig*0.2!2)
}

)
~orego=nil;

(
{
var in, chain;
in = SinOsc.ar(SinOsc.kr(SinOsc.kr(0.08,0,6,6.2).squared, 0, 100,800));
//in = WhiteNoise.ar(0.2);
chain = FFT(LocalBuf(2048), in);
chain = PV_BinScramble(chain, LFNoise2.kr(20)*0,5+0.5, 0.1);
0.5 * IFFT(chain);
}.play;
)
s.freeAll





//// COULD WORK
(
~response_1.play;
~response_1.quant=4;
~response_1={
	var i = In.ar(8);
	var e = PeakFollower.ar(i,0.24);
	var ch = Changed.ar(e,0.002);
	
	var p = Peak.ar(i,ch);
	var p2 = Peak.ar(i,ch);

	var s;
	var sco;

	i = PitchShift.ar(i,0.2,1.2);
	s = GVerb.ar(i,3,2);
	
	s = CombC.ar(s,2,Lag.ar(p*1.9+0.02,10),80.2)+s;
	s = JPverb.ar(
		s,
		t60: 10,
		damp: 0,
		size: 1,
		earlyDiff: 0.1707,
		modDepth: 0.1,
		modFreq: 2,
		low: 1,
		mid: 1,
		high: 1,
		lowcut: 500,
		highcut: 2000);
	sco = s;
	
	sco = Convolution.ar(s,In.ar(8),2**14,0.25)+(sco*0.2);
	//sco = Normalizer.ar(sco)*0.1+sco;
	Out.ar(0,sco!2);
}
)
~response_1=nil;

(
~response_2.play;
~response_2.quant=1;
~response_2={
	var g = Gate.ar(In.ar(8),1-PeakFollower.ar(In.ar(8),0.1)-0.63);
	var i = CombN.ar(g,2,PeakFollower.ar(g,0.7)*1+0.5,1);
	var pf = PeakFollower.ar(g,0.42);
	var s = CombC.ar(i,3,3-(pf*2.7),1.3)-i;
	s = Normalizer.ar(s)*0.2+s;
	Out.ar(0,s!2);
}
)
~response_2=nil;


(
~response_3.play;
~response_3.quant=1;
~response_3={
	var i = In.ar(8);
	var si = EnvFollow.ar(i,0.19,1);
	var sch = Schmidt.ar(si,0.12,0.09);
	var t = Trig.ar(sch);


	var spd1 = TRand.ar(0,1,t)*20;
	var spd2 = TRand.ar(0,1,t)*20;
	var spd3 = TRand.ar(0,1,t)*20;
	
	var r1 = Lag.ar(TRand.ar(0,1,t),spd1);
	var r2 = Lag.ar(TRand.ar(0,1,t),spd2);
	var r3 = Lag.ar(TRand.ar(0,1,t),spd3);
	var r4 = Lag.ar(TRand.ar(0,1,t),0.3);
	var r5 = Lag.ar(TRand.ar(0,1,t),0.3);
	var r6 = Lag.ar(TRand.ar(0,1,t),2.3);	
	
	var c1 = CombN.ar(i,2,r1*1.9+0.001,2);
	var c2 = CombN.ar(i,2,r2*0.3+0.001,1);
	var c3 = CombC.ar(i,3,r3*2.7+0.001,1);
	
	var sum = Mix.ar([c1,c2,c3]);

	var space = PitchShift.ar(GVerb.ar(sum,r4*70+1.3,r6*3+0.2),r6*20,r5-0.5+1);

	//	var o = sum+space*0.3;
	var o = -1*Normalizer.ar(sum+space)*0.23;
	
	Out.ar(0,o!2);
}
)
~response_3=nil;
~cross_1=nil;
(
~cross_1.play;
~cross_1.quant=1;
~cross_1={
	var i = In.ar(13);
	var i2 = In.ar(14);
	var cross = Convolution.ar(i,i2,2**12,0.24);
	Out.ar(0,cross!2);
}
)
2**12